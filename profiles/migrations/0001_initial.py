# Generated by Django 5.2.3 on 2025-07-01 06:56

import django.db.models.deletion
import profiles.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BusinessProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "client_id",
                    models.CharField(
                        editable=False,
                        help_text="Unique, URL-safe identifier for this client. Used for lookups and URLs, but not the primary key.",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        default="ACME Corp",
                        help_text="Human-friendly business name. Editable.",
                        max_length=255,
                    ),
                ),
                ("business_type", models.TextField(blank=True, null=True)),
                ("business_description", models.TextField(blank=True, null=True)),
                ("contact_info", models.TextField(blank=True, null=True)),
                ("location", models.CharField(blank=True, max_length=200, null=True)),
                ("common_expenses", models.TextField(blank=True, null=True)),
                ("custom_categories", models.TextField(blank=True, null=True)),
                ("industry_keywords", models.TextField(blank=True, null=True)),
                ("category_patterns", models.TextField(blank=True, null=True)),
                ("business_rules", models.TextField(blank=True, null=True)),
                ("ai_generated_profile", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="IRSWorksheet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="LLMConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("provider", models.CharField(max_length=255)),
                ("model", models.CharField(max_length=255, unique=True)),
                ("url", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("module_path", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="IRSExpenseCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "line_number",
                    models.CharField(
                        help_text="Line number on the IRS form", max_length=50
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "worksheet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="categories",
                        to="profiles.irsworksheet",
                    ),
                ),
            ],
            options={
                "ordering": ["worksheet", "line_number"],
                "unique_together": {("worksheet", "name")},
            },
        ),
        migrations.CreateModel(
            name="ProcessingTask",
            fields=[
                (
                    "task_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("payee_lookup", "Payee Lookup"),
                            ("classification", "Classification"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("transaction_count", models.IntegerField()),
                ("processed_count", models.IntegerField(default=0)),
                ("error_count", models.IntegerField(default=0)),
                ("error_details", models.JSONField(default=dict)),
                ("task_metadata", models.JSONField(default=dict)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="profiles.businessprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SearchResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query", models.CharField(max_length=255)),
                ("title", models.CharField(max_length=255)),
                ("url", models.URLField()),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("source", models.CharField(default="searxng", max_length=50)),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["query"], name="profiles_se_query_b19cd4_idx"),
                    models.Index(
                        fields=["created_at"], name="profiles_se_created_dab3a6_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StatementFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        upload_to=profiles.models.statement_upload_to_uuid
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[("pdf", "PDF"), ("csv", "CSV"), ("other", "Other")],
                        max_length=10,
                    ),
                ),
                ("original_filename", models.CharField(max_length=255)),
                ("upload_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("uploaded", "Uploaded"),
                            ("identified", "Identified"),
                            ("parsed", "Parsed"),
                            ("normalized", "Normalized"),
                            ("error", "Error"),
                        ],
                        default="uploaded",
                        max_length=20,
                    ),
                ),
                ("status_detail", models.TextField(blank=True, null=True)),
                ("bank", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "account_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("year", models.IntegerField(blank=True, null=True)),
                ("month", models.IntegerField(blank=True, null=True)),
                (
                    "parsed_metadata",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    "parser_module",
                    models.CharField(
                        blank=True,
                        help_text="Registered parser module name (from ParserRegistry)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "statement_type",
                    models.CharField(
                        blank=True,
                        help_text="Flexible statement type (e.g., VISA, checking, etc.)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "statement_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA256 of file contents for deduplication",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "needs_account_number",
                    models.BooleanField(
                        default=False,
                        help_text="True if this file needs an account number to be entered manually.",
                    ),
                ),
                (
                    "account_holder_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "statement_period_start",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "statement_period_end",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "statement_date",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "account_type",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statement_files",
                        to="profiles.businessprofile",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Statement File",
                "verbose_name_plural": "Statement Files",
                "ordering": ["-upload_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ParsingRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("parser_module", models.CharField(max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[("success", "Success"), ("fail", "Fail")],
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True, null=True)),
                ("rows_imported", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "statement_file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parsing_runs",
                        to="profiles.statementfile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaxChecklistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tax_year", models.CharField(max_length=8)),
                ("form_code", models.CharField(max_length=10)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("complete", "Complete"),
                            ("needs_review", "Needs Review"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "attachments",
                    models.FileField(
                        blank=True, null=True, upload_to="tax_checklist_attachments/"
                    ),
                ),
                ("current_year_value", models.TextField(blank=True, null=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                (
                    "business_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tax_checklist_items",
                        to="profiles.businessprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tax Checklist Item",
                "verbose_name_plural": "Tax Checklist Items",
                "ordering": ["business_profile", "tax_year", "form_code"],
            },
        ),
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("purpose", models.TextField()),
                ("prompt", models.TextField()),
                (
                    "llm",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="agents",
                        to="profiles.llmconfig",
                    ),
                ),
                (
                    "tools",
                    models.ManyToManyField(
                        blank=True, related_name="agents", to="profiles.tool"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("transaction_date", models.DateField()),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("description", models.TextField()),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                ("parsed_data", models.JSONField(blank=True, default=dict)),
                ("file_path", models.CharField(blank=True, max_length=255, null=True)),
                ("source", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "transaction_type",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "normalized_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("statement_start_date", models.DateField(blank=True, null=True)),
                ("statement_end_date", models.DateField(blank=True, null=True)),
                (
                    "account_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "transaction_hash",
                    models.CharField(
                        blank=True, db_index=True, max_length=64, null=True, unique=True
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=128, null=True
                    ),
                ),
                ("normalized_description", models.TextField(blank=True, null=True)),
                ("payee", models.CharField(blank=True, max_length=255, null=True)),
                ("confidence", models.CharField(blank=True, max_length=50, null=True)),
                ("reasoning", models.TextField(blank=True, null=True)),
                ("payee_reasoning", models.TextField(blank=True, null=True)),
                ("business_context", models.TextField(blank=True, null=True)),
                ("questions", models.TextField(blank=True, null=True)),
                (
                    "classification_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of classification (e.g., 'business', 'personal')",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "worksheet",
                    models.CharField(
                        blank=True,
                        help_text="Tax worksheet category (e.g., '6A', 'Auto', 'HomeOffice')",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "business_percentage",
                    models.IntegerField(
                        default=100,
                        help_text="Percentage of the transaction that is business-related",
                    ),
                ),
                (
                    "payee_extraction_method",
                    models.CharField(
                        default=None,
                        help_text="Method used to extract the payee information",
                        max_length=128,
                    ),
                ),
                (
                    "classification_method",
                    models.CharField(
                        default=None,
                        help_text="Method used to classify the transaction",
                        max_length=128,
                    ),
                ),
                ("parser_name", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "needs_account_number",
                    models.BooleanField(
                        default=False,
                        help_text="True if this transaction needs an account number to be entered manually.",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="profiles.businessprofile",
                    ),
                ),
                (
                    "statement_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="profiles.statementfile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NormalizedVendorData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("normalized_name", models.CharField(max_length=255)),
                ("normalized_description", models.TextField(blank=True, null=True)),
                ("justification", models.TextField(blank=True, null=True)),
                ("confidence", models.DecimalField(decimal_places=2, max_digits=5)),
                (
                    "transaction",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="normalized_data",
                        to="profiles.transaction",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClassificationOverride",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "new_classification_type",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "new_worksheet",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_by", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "transaction",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classification_overrides",
                        to="profiles.transaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Classification Override",
                "verbose_name_plural": "Classification Overrides",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TransactionClassification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "classification_type",
                    models.CharField(
                        help_text="Type of classification (e.g., 'business', 'personal')",
                        max_length=50,
                    ),
                ),
                (
                    "worksheet",
                    models.CharField(
                        help_text="Tax worksheet category (e.g., '6A', 'Auto', 'HomeOffice')",
                        max_length=50,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Specific expense category within the worksheet",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "business_percentage",
                    models.IntegerField(
                        default=100,
                        help_text="Percentage of the transaction that is business-related",
                    ),
                ),
                (
                    "confidence",
                    models.CharField(
                        help_text="Confidence level of the classification",
                        max_length=20,
                    ),
                ),
                (
                    "reasoning",
                    models.TextField(
                        help_text="Explanation for the classification decision"
                    ),
                ),
                (
                    "created_by",
                    models.CharField(
                        help_text="Agent or user who created this classification",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this is the current active classification",
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classifications",
                        to="profiles.transaction",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ClientExpenseCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category_name", models.CharField(max_length=255)),
                (
                    "category_type",
                    models.CharField(
                        choices=[
                            ("other_expense", "Other Expense"),
                            ("custom_category", "Custom Category"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("tax_year", models.IntegerField()),
                (
                    "worksheet",
                    models.CharField(
                        choices=[
                            ("6A", "6A"),
                            ("Auto", "Auto"),
                            ("HomeOffice", "HomeOffice"),
                            ("Personal", "Personal"),
                            ("None", "None"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "parent_category",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("line_number", models.CharField(blank=True, max_length=50, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_expense_categories",
                        to="profiles.businessprofile",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("client", "category_name", "tax_year"),
                        name="unique_client_category_year",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="BusinessExpenseCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category_name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "tax_year",
                    models.IntegerField(help_text="Tax year this category applies to"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "business",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="business_expense_categories",
                        to="profiles.businessprofile",
                    ),
                ),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        help_text="The IRS category this maps to (e.g., 'Other Expenses' on 6A)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="profiles.irsexpensecategory",
                    ),
                ),
                (
                    "worksheet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="business_categories",
                        to="profiles.irsworksheet",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Business Expense Categories",
                "unique_together": {("business", "category_name")},
            },
        ),
        migrations.AddConstraint(
            model_name="statementfile",
            constraint=models.UniqueConstraint(
                fields=("client", "statement_hash"), name="unique_client_statement_hash"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taxchecklistitem",
            unique_together={("business_profile", "tax_year", "form_code")},
        ),
        migrations.AddConstraint(
            model_name="transaction",
            constraint=models.UniqueConstraint(
                fields=("client", "transaction_hash"), name="unique_transaction"
            ),
        ),
        migrations.AddIndex(
            model_name="transactionclassification",
            index=models.Index(
                fields=["transaction", "created_at"],
                name="profiles_tr_transac_002390_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transactionclassification",
            index=models.Index(
                fields=["transaction", "is_active"],
                name="profiles_tr_transac_a4259e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transactionclassification",
            index=models.Index(
                fields=["classification_type"], name="profiles_tr_classif_da697e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transactionclassification",
            index=models.Index(
                fields=["worksheet"], name="profiles_tr_workshe_cd2bdb_idx"
            ),
        ),
    ]

# PRD: Debugging Django Admin RecursionError in LedgerFlow_AI

## Problem Statement
The Django admin interface in the LedgerFlow_AI project fails with a `RecursionError: maximum recursion depth exceeded while calling a Python object`. The error is triggered by the presence of the `StatementFile` (now `UploadedFile`) model in `profiles/models.py`. All standard debugging, environment resets, and database resets have failed to resolve the issue.

## Environment
- Django version: 5.2.3
- Python version: 3.11
- OS: macOS (darwin 24.5.0)
- Virtualenvs: venv, cleanenv
- Project: LedgerFlow_AI

## Steps Already Taken
1. Disabled all custom admin templates and admin.py files. (done)
2. Cleared Python bytecode caches. (done)
3. Removed all custom apps from INSTALLED_APPS; admin worked with only built-ins. (done)
4. Added apps back one by one; adding `profiles` brought back the RecursionError. (done)
5. Renamed `profiles/models.py` to disable all models: error disappeared. (done)
6. Uncommented models one by one: error only returns with `StatementFile`/`UploadedFile` present. (done)
7. Restored full model, fixed NameError, error persists even with all admin/forms/template tag references commented out. (done)
8. Commented out custom admin navigation: no effect. (done)
9. Created clean virtualenv and minimal Django project: admin works fine. (done)
10. Full database reset, new DB, dropped all tables/views/sequences, ran fresh migrations, created new superuser: error persists. (done)

## Hypothesis
The error is caused by a code-level recursion in Django's admin context generation, triggered by a bidirectional relationship between `UploadedFile` and `Transaction`:
- `UploadedFile.transactions` is a ManyToManyField to `Transaction` (with related_name="source_files").
- `Transaction.statement_file` is a ForeignKey back to `UploadedFile`.
This creates a cycle in Django's model graph, which may cause infinite recursion in the admin's app-dictionary builder (see https://code.djangoproject.com/ticket/35694).

## Goal
Resolve the RecursionError and restore full Django admin functionality for all required models. Identify and document the root cause.

## Tasks
1. Disabled all custom admin templates and admin.py files. (done)
2. Cleared Python bytecode caches. (done)
3. Removed all custom apps from INSTALLED_APPS; admin worked with only built-ins. (done)
4. Added apps back one by one; adding `profiles` brought back the RecursionError. (done)
5. Renamed `profiles/models.py` to disable all models: error disappeared. (done)
6. Uncommented models one by one: error only returns with `StatementFile`/`UploadedFile` present. (done)
7. Restored full model, fixed NameError, error persists even with all admin/forms/template tag references commented out. (done)
8. Commented out custom admin navigation: no effect. (done)
9. Created clean virtualenv and minimal Django project: admin works fine. (done)
10. Full database reset, new DB, dropped all tables/views/sequences, ran fresh migrations, created new superuser: error persists. (done)
11. Comment out the M2M field in UploadedFile and test admin.
12. If error persists, comment out the FK field in Transaction and test admin.
13. If error persists, try removing the related_name from the M2M and test admin.
14. If error persists, try renaming the model everywhere and test admin.
15. If error persists, check for circular imports or registry issues in all related files.
16. If error persists, try a field-by-field reintroduction in a fresh clone of the repo, testing admin after each.
17. If error persists, comment out all custom template tags and middleware, then test admin.
18. If error persists, escalate to Django bug tracker with full reproduction steps and findings.

## Success Criteria
- Django admin loads without RecursionError.
- All required models are present and functional in the admin interface.
- Root cause is identified and documented.
- All steps and results are logged for future reference.
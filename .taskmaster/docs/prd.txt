<context>
# Overview
LedgerFlow is a modern, scalable, multi-user web platform for financial statement management and reporting. It is a complete rebuild using FastAPI (Python) for the backend and React (TypeScript) for the frontend. The goal is to provide a robust, extensible, and user-friendly system for uploading, parsing, managing, and reporting on financial statements. The platform is designed for accountants, business administrators, and financial analysts who require efficient, auditable workflows and modern UI/UX.

# Core Features
- **User Authentication & Roles**: Secure login (JWT/OAuth2), role-based access (admin, user, agent)
- **Statement Upload**: Drag-and-drop PDF/CSV upload, file validation, upload history
- **Pluggable Parser Modules**: Modular Python parser registry for different statement formats, easy extension
- **Transaction Management**: Search, filter, batch process, and edit transactions; AI/agent workflows for categorization
- **Reporting & Dashboards**: 6A worksheet, exports (CSV/XLSX), stats, and custom reports
- **Admin Panel**: Manage users, agents, parsers, business profiles
- **Background Processing**: Celery/FastAPI tasks for long-running jobs (parsing, report generation)
- **Legacy Data Compatibility**: Support for migration from legacy Django/Postgres DB schema

# User Experience
- **Personas**: Accountants, business admins, financial analysts
- **Key Flows**: Login → Upload statement → Parse & review transactions → Generate reports → Export/share
- **UI/UX**: Modern, accessible, responsive design (Material UI/AntD/Tailwind); clear error handling; onboarding guides
</context>
<PRD>
# Technical Architecture
- **Backend**: FastAPI (Python), SQLAlchemy ORM, Celery (Redis/RabbitMQ), Postgres DB
- **Frontend**: React (TypeScript), modern UI library
- **Parser Integration**: Pluggable Python modules or microservices
- **Reporting**: SQL queries, aggregation endpoints, export APIs
- **Infrastructure**: Docker for local/dev/prod, background job queue, secure API endpoints

# Development Roadmap
- **Phase 1: Backend Foundation**
  - Scaffold FastAPI models/endpoints to match legacy schema
  - Implement authentication/role management
  - Set up Celery/FastAPI background jobs
- **Phase 2: Frontend Foundation**
  - Scaffold React app (auth, dashboard, upload flows)
  - Integrate with FastAPI endpoints
- **Phase 3: Parser & Transaction Workflows**
  - Implement pluggable parser registry
  - Transaction management UI/logic
- **Phase 4: Reporting & Admin**
  - Build reporting endpoints and dashboards
  - Admin panel for user/agent/parser/business management
- **Phase 5: Testing & Migration**
  - Test with legacy data, iterate, and refine
  - Provide migration scripts as needed
- **Future Enhancements**
  - Advanced AI/agent workflows, custom report builders, audit trails

# Logical Dependency Chain
- Backend models/endpoints → Auth → Background jobs → Frontend scaffolding → Parser integration → Transaction workflows → Reporting → Admin features → Testing/migration
- Prioritize getting a working upload→parse→review→report flow as early as possible
- Each feature is atomic and can be improved iteratively

# Risks and Mitigations
- **Technical**: Legacy DB compatibility (mitigate with migration scripts, thorough testing)
- **MVP Scope**: Focus on core upload→parse→report flow first
- **Resource**: Modular design allows phased development and onboarding of contributors

# Appendix
- **Research**: See cline_docs/ for legacy system analysis, migration notes, and technical decisions
- **Specs**: Refer to .taskmaster/templates/example_prd.txt for PRD structure
</PRD>
